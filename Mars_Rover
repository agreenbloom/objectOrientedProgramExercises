class Rover
 attr_accessor :x, :y, :direction

  def initalize(x, y, direction, width = 10, length = 10)
    @x, @y, @direction = x, y, direction
    @width, @length = width, length
  end

  def move
    case @direction
     when "N"
       @y += 1
     when "S"
       @y -= 1
     when "E"
      @y += 1
     when "W"
      @y -= 1
    end
   end

Compass = ['N', 'E', 'S', 'W']


  def turn(n = 1)
    pos = Compass.index(@direction)
    @direction = Compass.rotate(n) [pos]
  end

  def turn_right
      Compass.rotate(1)

  def turn_left
      Compass.rotate(-1)
  end


  def read_instruction(i)
    case i
    when "M"
      move
    when "L"
      turn_left
    when "R"
      turn_right
    end
    puts self
  end

def to_s
    "<Rover: #{x}"
  end

end


r = Rover.new(1,1,"N")
puts r.to_s
r.turn_right
puts r
r.turn_left
puts r
r.move
puts r

r.read_instruction("M")
r.read_instruction("L")
r.read_instruction("R")


input.each_char do |c|



